// Interfaces cho d·ªØ li·ªáu t·ª´ API
interface DanhMuc {
    id?: string;
    ten_danh_muc: string;
    mo_ta?: string;
}

interface ThuongHieu {
    id?: string;
    ten_thuong_hieu: string;
    mo_ta?: string;
}

interface SanPham2 {
    ten_san_pham: string;
    ma_san_pham: string;
    gia_ban: number | string;
    mo_ta?: string | null;
    danh_muc?: string | null;
    thuong_hieu?: string | null;
}

// API Functions
async function getAllDanhMucAd(): Promise<DanhMuc[]> {
    try {
        const response = await fetch('http://localhost:3000/api/danh-muc');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const rawData = await response.json();

        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API format sang interface format
        return rawData.map((item: any) => ({
            id: item._id || item.id,
            ten_danh_muc: item._ten_danh_muc,
            mo_ta: item._mo_ta || undefined
        }));
    } catch (error) {
        console.error('L·ªói khi l·∫•y danh m·ª•c:', error);
        throw error;
    }
}

async function getAllThuongHieuAd(): Promise<ThuongHieu[]> {
    try {
        const response = await fetch('http://localhost:3000/api/thuong-hieu');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const rawData = await response.json();

        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API format sang interface format
        return rawData.map((item: any) => ({
            id: item._id || item.id,
            ten_thuong_hieu: item._ten_thuong_hieu,
            mo_ta: item._mo_ta || undefined
        }));
    } catch (error) {
        console.error('L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu:', error);
        throw error;
    }
}

// C·∫≠p nh·∫≠t h√†m createProductAd ƒë·ªÉ ph√π h·ª£p v·ªõi API endpoint
async function createProductAd(product: SanPham2): Promise<string | null> {
    try {
        // L·∫•y t√™n danh m·ª•c v√† th∆∞∆°ng hi·ªáu t·ª´ select elements
        const danhMucSelect = document.getElementById('danhMuc') as HTMLSelectElement;
        const thuongHieuSelect = document.getElementById('thuongHieu') as HTMLSelectElement;

        const apiData = {
            ten_san_pham: product.ten_san_pham,
            ma_san_pham: product.ma_san_pham,
            mo_ta: product.mo_ta,
            gia_ban: product.gia_ban,
            ten_danh_muc: getSelectedTextAd(danhMucSelect), // Truy·ªÅn t√™n danh m·ª•c
            ten_thuong_hieu: getSelectedTextAd(thuongHieuSelect) // Truy·ªÅn t√™n th∆∞∆°ng hi·ªáu
        };

        const response = await fetch('http://localhost:3000/api/san-pham', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(apiData)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
        }
        const result = await response.json();
        return result.id || result._id || null;
    } catch (error) {
        console.error('L·ªói khi t·∫°o s·∫£n ph·∫©m:', error);
        throw error;
    }
}


// Utility Functions
function formatPriceAd(price: number | string): string {
    let numPrice = price;
    if (price === undefined || price === null) numPrice = 0;
    if (typeof price === 'string') numPrice = parseFloat(price);
    if (isNaN(numPrice as number)) numPrice = 0;

    return new Intl.NumberFormat('vi-VN').format(numPrice as number);
}

function validateFormDataAd(data: SanPham2): boolean {
    if (!data.ten_san_pham || !data.ten_san_pham.trim()) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!');
        (document.getElementById('tenSanPham') as HTMLInputElement)?.focus();
        return false;
    }

    if (!data.ma_san_pham || !data.ma_san_pham.trim()) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m!');
        (document.getElementById('maSanPham') as HTMLInputElement)?.focus();
        return false;
    }

    // X·ª≠ l√Ω validation cho gia_ban ki·ªÉu number | string
    let price = data.gia_ban;
    if (typeof price === 'string') {
        price = parseFloat(price);
    }

    if (!price || isNaN(price) || price <= 0) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi√° b√°n h·ª£p l·ªá!');
        (document.getElementById('giaBan') as HTMLInputElement)?.focus();
        return false;
    }

    if (data.ma_san_pham.length < 3) {
        alert('‚ö†Ô∏è M√£ s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!');
        (document.getElementById('maSanPham') as HTMLInputElement)?.focus();
        return false;
    }

    return true;
}

function getSelectedTextAd(selectElement: HTMLSelectElement): string {
    const selectedOption = selectElement.options[selectElement.selectedIndex];
    return selectedOption ? selectedOption.textContent || '' : '';
}

function formatPriceInputAd(input: HTMLInputElement): void {
    let value = input.value.replace(/[^\d]/g, '');

    if (value) {
        // Store raw value for form submission
        input.setAttribute('data-raw-value', value);

        // Format hi·ªÉn th·ªã v·ªõi d·∫•u ph·∫©y
        const formattedValue = parseInt(value).toLocaleString('vi-VN');

        // C·∫≠p nh·∫≠t placeholder ƒë·ªÉ hi·ªÉn th·ªã format
        input.placeholder = `${formattedValue} VNƒê`;
    } else {
        input.placeholder = '0';
    }
}

function showSuccessMessageAd(element: HTMLElement): void {
    element.style.display = 'block';
    element.innerHTML = 'üéâ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!';
    element.style.background = 'linear-gradient(135deg, #F19EDC, #e68cc7)';
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function hideSuccessMessageAd(element: HTMLElement): void {
    element.style.display = 'none';
}

function showErrorMessageAd(element: HTMLElement, message: string): void {
    // Hi·ªÉn th·ªã trong success message v·ªõi m√†u ƒë·ªè
    element.style.display = 'block';
    element.style.background = 'linear-gradient(135deg, #ff6b6b, #ee5a52)';
    element.innerHTML = `‚ùå ${message}`;

    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        hideSuccessMessageAd(element);
        // Reset l·∫°i m√†u
        element.style.background = 'linear-gradient(135deg, #F19EDC, #e68cc7)';
    }, 5000);

    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function populateDanhMucSelectAd(selectElement: HTMLSelectElement, danhMucs: DanhMuc[]): void {
    // Clear existing options
    selectElement.innerHTML = '<option value="">-- Ch·ªçn danh m·ª•c --</option>';

    danhMucs.forEach(danhMuc => {
        const option = document.createElement('option');
        option.value = danhMuc.id || danhMuc.ten_danh_muc;
        option.textContent = danhMuc.ten_danh_muc;
        option.title = danhMuc.mo_ta || danhMuc.ten_danh_muc; // Tooltip
        selectElement.appendChild(option);
    });

    console.log(`ƒê√£ t·∫£i ${danhMucs.length} danh m·ª•c`);
}

function populateThuongHieuSelectAd(selectElement: HTMLSelectElement, thuongHieus: ThuongHieu[]): void {
    // Clear existing options
    selectElement.innerHTML = '<option value="">-- Ch·ªçn th∆∞∆°ng hi·ªáu --</option>';

    thuongHieus.forEach(thuongHieu => {
        const option = document.createElement('option');
        option.value = thuongHieu.id || thuongHieu.ten_thuong_hieu;
        option.textContent = thuongHieu.ten_thuong_hieu;
        option.title = thuongHieu.mo_ta || thuongHieu.ten_thuong_hieu; // Tooltip
        selectElement.appendChild(option);
    });

    console.log(`ƒê√£ t·∫£i ${thuongHieus.length} th∆∞∆°ng hi·ªáu`);
}

function setupHoverEffectsAd(): void {
    const inputs = document.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        const element = input as HTMLElement;

        element.addEventListener('mouseenter', () => {
            (element as HTMLInputElement).style.borderColor = '#e68cc7';
        });

        element.addEventListener('mouseleave', () => {
            if (element !== document.activeElement) {
                (element as HTMLInputElement).style.borderColor = '#F19EDC';
            }
        });
    });
}

function setupAnimationsAd(): void {
    const container = document.querySelector('.container') as HTMLElement;
    if (container) {
        container.style.opacity = '0';
        container.style.transform = 'translateY(30px)';

        setTimeout(() => {
            container.style.transition = 'all 0.6s ease';
            container.style.opacity = '1';
            container.style.transform = 'translateY(0)';
        }, 100);
    }
}

function getFormDataAd(form: HTMLFormElement): SanPham2 {
    const formData = new FormData(form);

    // X·ª≠ l√Ω gia_ban c√≥ th·ªÉ l√† string ho·∫∑c number
    const giaBanValue = formData.get('giaBan') as string;
    let giaBan: number | string = parseInt(giaBanValue) || 0;

    // N·∫øu mu·ªën gi·ªØ nguy√™n d·∫°ng string, c√≥ th·ªÉ s·ª≠ d·ª•ng:
    // let giaBan: number | string = giaBanValue || '0';

    return {
        ten_san_pham: formData.get('tenSanPham') as string,
        ma_san_pham: formData.get('maSanPham') as string,
        gia_ban: giaBan,
        mo_ta: formData.get('moTa') as string || null,
        danh_muc: formData.get('danhMuc') as string || null,
        thuong_hieu: formData.get('thuongHieu') as string || null
    };
}

function setFormDataAd(data: Partial<SanPham2>): void {
    if (data.ten_san_pham) {
        (document.getElementById('tenSanPham') as HTMLInputElement).value = data.ten_san_pham;
    }
    if (data.ma_san_pham) {
        (document.getElementById('maSanPham') as HTMLInputElement).value = data.ma_san_pham;
    }
    if (data.gia_ban !== undefined && data.gia_ban !== null) {
        // X·ª≠ l√Ω gia_ban c√≥ th·ªÉ l√† number ho·∫∑c string
        const giaBanValue = typeof data.gia_ban === 'string' ? data.gia_ban : data.gia_ban.toString();
        (document.getElementById('giaBan') as HTMLInputElement).value = giaBanValue;
    }
    if (data.mo_ta) {
        (document.getElementById('moTa') as HTMLTextAreaElement).value = data.mo_ta;
    }
    if (data.danh_muc) {
        (document.getElementById('danhMuc') as HTMLSelectElement).value = data.danh_muc;
    }
    if (data.thuong_hieu) {
        (document.getElementById('thuongHieu') as HTMLSelectElement).value = data.thuong_hieu;
    }
}

// Main Functions
async function loadDataAd(): Promise<void> {
    const danhMucSelect = document.getElementById('danhMuc') as HTMLSelectElement;
    const thuongHieuSelect = document.getElementById('thuongHieu') as HTMLSelectElement;
    const successMessage = document.getElementById('successMessage') as HTMLElement;

    try {
        // Load danh m·ª•c v√† th∆∞∆°ng hi·ªáu song song
        const [danhMucs, thuongHieus] = await Promise.all([
            getAllDanhMucAd(),
            getAllThuongHieuAd()
        ]);

        populateDanhMucSelectAd(danhMucSelect, danhMucs);
        populateThuongHieuSelectAd(thuongHieuSelect, thuongHieus);

    } catch (error) {
        console.error('L·ªói khi load d·ªØ li·ªáu:', error);
        showErrorMessageAd(successMessage, 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c v√† th∆∞∆°ng hi·ªáu. Ki·ªÉm tra k·∫øt n·ªëi server.');

        // Fallback: hi·ªÉn th·ªã option l·ªói
        danhMucSelect.innerHTML = '<option value="">-- L·ªói t·∫£i danh m·ª•c --</option>';
        thuongHieuSelect.innerHTML = '<option value="">-- L·ªói t·∫£i th∆∞∆°ng hi·ªáu --</option>';
    }
}

// H√†m l·∫•y ID s·∫£n ph·∫©m t·ª´ m√£ s·∫£n ph·∫©m (n·∫øu c·∫ßn)
async function getProductIdByCode(maSanPham: string): Promise<string | null> {
    try {
        const response = await fetch(`http://localhost:3000/api/san-pham?ma_san_pham=${maSanPham}`);
        if (!response.ok) {
            return null;
        }
        const data = await response.json();
        return data.id || data._id || null;
    } catch (error) {
        console.error('L·ªói khi l·∫•y ID s·∫£n ph·∫©m:', error);
        return null;
    }
}

// H√†m handleSubmitAd ƒë∆∞·ª£c c·∫≠p nh·∫≠t
async function handleSubmitAd(e: Event): Promise<void> {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const successMessage = document.getElementById('successMessage') as HTMLElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;

    const productData = getFormDataAd(form);

    // Validation
    if (!validateFormDataAd(productData)) {
        return;
    }

    // Disable submit button ƒë·ªÉ tr√°nh double submit
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'ƒêang th√™m...';
    }

    try {
        // G·ªçi API ƒë·ªÉ t·∫°o s·∫£n ph·∫©m m·ªõi
        const productId: string | null = await createProductAd(productData);

        // Hi·ªÉn th·ªã th√†nh c√¥ng
        showSuccessMessageAd(successMessage);
        console.log('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', productId);

        // Reset form
        form.reset();

        // Ch·ªù 2 gi√¢y r·ªìi chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
        setTimeout(async () => {
            try {
                console.log('ID s·∫£n ph·∫©m m·ªõi:', productId);
                if (productId) {
                    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt v·ªõi ID s·∫£n ph·∫©m
                    window.location.href = `/FE/HTML-AD/ChiTietSanPham_Ad.html?id=${productId}`;
                } else {
                    // Fallback: chuy·ªÉn h∆∞·ªõng v·ªõi m√£ s·∫£n ph·∫©m
                    window.location.href = `/FE/HTML-AD/ChiTietSanPham_Ad.html?ma_san_pham=${encodeURIComponent(productData.ma_san_pham)}`;
                }
            } catch (error) {
                console.error('L·ªói khi chuy·ªÉn h∆∞·ªõng:', error);
                // V·∫´n chuy·ªÉn h∆∞·ªõng v·ªõi m√£ s·∫£n ph·∫©m n·∫øu c√≥ l·ªói
                window.location.href = `/FE/HTML-AD/ChiTietSanPham_Ad.html?ma_san_pham=${encodeURIComponent(productData.ma_san_pham)}`;
            }
        }, 100);

    } catch (error) {
        console.error('L·ªói khi t·∫°o s·∫£n ph·∫©m:', error);
        const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m';
        showErrorMessageAd(successMessage, errorMessage);
    } finally {
        // Re-enable submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Th√™m s·∫£n ph·∫©m';
        }
    }
}

function handleResetAd(): void {
    const successMessage = document.getElementById('successMessage') as HTMLElement;
    setTimeout(() => {
        hideSuccessMessageAd(successMessage);
    }, 100);
}

function setupEventListenersAd(): void {
    const form = document.getElementById('productForm') as HTMLFormElement;
    const giaBanInput = document.getElementById('giaBan') as HTMLInputElement;

    // Submit form
    form.addEventListener('submit', handleSubmitAd);

    // Reset form
    form.addEventListener('reset', handleResetAd);

    // Format gi√° b√°n
    giaBanInput.addEventListener('input', (e) => {
        formatPriceInputAd(e.target as HTMLInputElement);
    });

    // Hover effects
    setupHoverEffectsAd();
}

// Initialize function
async function initProductFormAd(): Promise<void> {
    await loadDataAd();
    setupEventListenersAd();
    setupAnimationsAd();
}

// Initialize khi DOM loaded
document.addEventListener('DOMContentLoaded', initProductFormAd);

// T·∫•t c·∫£ functions v√† interfaces ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng